{
  "hash": "16990cb9cc739e3b6bcf11d9497cdc64",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\n---\n\n## Pipeline Overview\n\nThis Quarto documentation describes the analytical workflow used to generate results for:\n\n> **Astle, W., & Haus, S. (2025).**, *Driving with Influence: Exploring Crash Factors of Automated Systems In Different Roadway Contexts* \n\nThe analysis is managed using the `targets`package, which handles dependency tracking and reproducible builds.\n\n### Visualizing the Workflow\n\nDiagrammatically, the workflow can be visualized as follows:\n\n```{mermaid}\nflowchart TD\n\n    %% Define the look for subgraphs\n    classDef blackText fill:none,color:black,font-weight:bold;\n\n    %% Initial load (Blue)\n    subgraph Initial_Datasets[\"Initial Datasets\"]\n        A[ADAS load]\n        B[ADS load]\n    end\n    class Initial_Datasets blackText\n    style A fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n    style B fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n\n    A --> C[Clean]\n    B --> C\n    style C fill:#2ca02c,stroke:#000,stroke-width:2px,color:#fff\n\n    %% Make rules nodes (Bright Gold)\n    C --> D[Make rules]\n    style D fill:#ffcc00,stroke:#000,stroke-width:2px,color:#000\n\n    %% Global Rules (Orange)\n    subgraph Global_Rules[\"Global Rules\"]\n        E[ADAS rules]\n        F[ADS rules]\n    end\n    class Global_Rules blackText\n    style E fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n    style F fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n\n    G[Calculate influence]\n    style G fill:#9467bd,stroke:#000,stroke-width:2px,color:#fff\n\n    D --> E --> G\n    D --> F --> G\n\n    G --> H[ADAS Global scores]\n    G --> I[ADS Global scores]\n    style H fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n    style I fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n\n    %% Initial Influence Scores\n    subgraph Global_Influence_Scores[\"Global Influence Scores\"]\n        H\n        I\n    end\n    class Global_Influence_Scores blackText\n\n    %% Join / Plot nodes (Cyan / Gray)\n    H --> J[Join Global scores]\n    I --> J\n    style J fill:#17becf,stroke:#000,stroke-width:2px,color:#000\n\n    J --> K[Plot Global scores]\n\n    style K fill:#00bfae,stroke:#000,stroke-width:2px,color:#000\n\n    %% Split step (Green)\n    C --> N[Split]\n    style N fill:#2ca02c,stroke:#000,stroke-width:2px,color:#fff\n\n    subgraph Roadway_Datasets[\"Roadway Datasets\"]\n        O[ADAS Highway]\n        P[ADAS Intersection]\n        Q[ADS Highway]\n        R[ADS Intersection]\n    end\n    class Roadway_Datasets blackText\n    style O fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n    style P fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n    style Q fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n    style R fill:#1f77b4,stroke:#000,stroke-width:2px,color:#fff\n\n    %% Make rules nodes (Bright Gold)\n    N --> O --> S[Make rules]\n    N --> P --> S\n    N --> Q --> S\n    N --> R --> S\n    style S fill:#ffcc00,stroke:#000,stroke-width:2px,color:#000\n\n    %% Roadway Rules (Orange)\n    S --> T[ADAS Highway Rules]\n    S --> U[ADAS Intersection Rules]\n    S --> V[ADS Highway Rules]\n    S --> W[ADS Intersection Rules]\n    style T fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n    style U fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n    style V fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n    style W fill:#ff7f0e,stroke:#000,stroke-width:2px,color:#000\n\n    subgraph Roadway_Rules[\"Roadway Rules\"]\n    T\n    U\n    V\n    W\n    end\n    class Roadway_Rules blackText\n\n    %% Roadway Rules Influence (Purple)\n    T --> X[Calculate influence]\n    U --> X\n    V --> X\n    W --> X\n    style X fill:#9467bd,stroke:#000,stroke-width:2px,color:#fff\n\n    %% Scores (Red)\n    X --> Y[ADAS Highway scores]\n    X --> Z[ADAS Intersection scores]\n    X --> AA[ADS Highway scores]\n    X --> AB[ADS Intersection scores]\n    style Y fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n    style Z fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n    style AA fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n    style AB fill:#d62728,stroke:#000,stroke-width:2px,color:#fff\n\n    subgraph Roadway_Influence_Scores[\"Roadway Influence Scores\"]\n    Y\n    Z\n    AA\n    AB\n    end\n    class Roadway_Influence_Scores blackText\n    \n    %% Join / Plot nodes (Cyan / Gray)\nZ --> AC[Join Intersection scores] --> AD[Plot Int scores]\nstyle AC fill:#17becf,stroke:#000,stroke-width:2px,color:#000\nstyle AD fill:#00bfae,stroke:#000,stroke-width:2px,color:#000\n\nY --> AE[Join Highway scores] --> AF[Plot Hwy scores]\nstyle AE fill:#17becf,stroke:#000,stroke-width:2px,color:#000\nstyle AF fill:#00bfae,stroke:#000,stroke-width:2px,color:#000\n\nAA --> AE\nAB -->AC\n\n```\n\n\n\n### How the Workflow Runs\n\nThe analysis is managed by the {targets} pipeline defined in `_targets.R`. This file outlines each step—data import, cleaning, analysis, and visualization—and their dependencies.\n\nCustom functions live in the `R/` folder and are automatically sourced by `{targets}`. Input data (public or simulated) are stored in `data/`, while processed outputs are created during the pipeline run.\n\n**Run the entire workflow with:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_make()\n```\n:::\n\n\n**You can then load the various outputs from the pipeline using:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(target_name)\n```\n:::\n\n\n### An Example\n\nAs an example, to view the cleaned data generated by the `{targets}` pipeline, I can:\n\n**1 - View the relevant part of the `_targets.R` file for reference.**\n\nIn this instance, it would look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_target(\n    cleaned_data, # this is the label of the target we would like to access\n    clean_data(data),\n    pattern = map(data),\n    iteration = \"list\" # to access the two individual datasets, we have the output as a list\n  )\n```\n:::\n\n\n**2 - We run `tar_make()` to run the pipeline**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_make()\n```\n:::\n\n\n**3 - Run load the cleaned datasets using `tar_load()`**\n\nNotice that the same name from the tar_target portion of the code is used with `tar_load`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(cleaned_data)\n```\n:::\n\n\n**4 - Access the dataset from the `cleaned_data` list**\n\nSince we had `iteration = \"list\"` in the `_targets.R` code, we can access each dataset separately from a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset_1 <- cleaned_data[[1]]\ndataset_2 <- cleaned_data[[2]]\n```\n:::\n\n\n### Further Reading\n\nFor further reference in regards to targets, please see the following documentation: [The {targets} R package user manual](https://books.ropensci.org/targets/)",
    "supporting": [
      "overview_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}